datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/entities"
  fileName     = "entityTypes.ts"
  enumFileName = "entityEnums.ts"
}

enum AuthProvider {
  EMAIL
  GOOGLE
  APPLE
  FACEBOOK
  NONE

  @@map("authProvider")
}

enum TicketState {
  PROCESSING
  COMPLETED
  CANCELLED
  EXPIRED

  @@map("ticketState")
}

enum MatchState {
  IN_PROGRESS
  FINISHED

  @@map("matchState")
}

enum Role {
  ADMIN
  SUPER_ADMIN

  @@map("role")
}

model MediaFile {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  path     String @db.VarChar(255)
  fileName String @db.VarChar(255)
  mimetype String @db.VarChar(255)

  @@index([mimetype])
  @@map("mediaFiles")
}

model User {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  email        String?      @unique @db.VarChar(255)
  userName     String?      @db.VarChar(255)
  passwordHash String?      @db.VarChar(255)
  isCompleted  Boolean
  authProvider AuthProvider
  isOnline     Boolean
  socketId     String       @db.VarChar(255)
  deviceId     String?      @unique

  refreshTokens       RefreshToken[]
  accountVerification AccountVerification?
  mathBattleAnswers   MathBattleAnswer[]
  mathBattleResults   MathBattleResult[]

  @@index([email, deviceId])
  @@map("users")
}

model AdminUser {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  userName     String @db.VarChar(255)
  email        String @db.VarChar(255)
  passwordHash String @db.VarChar(255)
  roles        Role[]

  refreshTokens RefreshToken[]

  @@map("adminUsers")
}

model RefreshToken {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  value String

  userId      BigInt?
  adminUserId BigInt?

  user      User?      @relation(fields: [userId], references: [id])
  adminUser AdminUser? @relation(fields: [adminUserId], references: [id])

  @@index([value], type: Hash)
  @@map("refreshTokens")
}

model AccountVerification {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  isVerified  Boolean
  oneTimeCode Int

  userId BigInt @unique

  user User @relation(fields: [userId], references: [id])

  @@map("accountVerification")
}

model MathField {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  name     String
  isPublic Boolean @default(true)

  mathProblems  MathProblem[]
  mathSubFields MathSubField[]
  Match         Match[]
  Ticket        Ticket[]

  @@map("mathFields")
}

model MathSubField {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  name String

  mathFieldId BigInt

  mathField MathField @relation(fields: [mathFieldId], references: [id])

  mathProblems    MathProblem[]
  answerFunctions AnswerFunction[]

  @@map("mathSubFields")
}

model Ticket {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  userId               BigInt
  state                TicketState
  matchId              BigInt?
  concurrencyTimestamp String?     @default(uuid()) @db.Uuid

  mathFieldId BigInt

  mathField MathField @relation(fields: [mathFieldId], references: [id])

  @@map("tickets")
}

model Match {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  startAt        DateTime
  endAt          DateTime
  closeAt        DateTime
  state          MatchState
  userIds        String[]
  mathProblemIds String[]

  mathFieldId BigInt

  mathField MathField @relation(fields: [mathFieldId], references: [id])

  mathBattleAnswers MathBattleAnswer[]
  mathBattleResults MathBattleResult[]

  @@map("matches")
}

model MathProblem {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  difficulty            Float    @db.Real
  imageMediaIds         String[]
  text                  String?
  tex                   String?  @unique
  answers               Json[]   @db.JsonB
  generatedBatchName    String?  @db.VarChar(255)
  meanTimeSpentInMillis Int      @default(0)
  timesAnswered         Int      @default(0)

  mathFieldId    BigInt
  mathSubFieldId BigInt

  mathField    MathField    @relation(fields: [mathFieldId], references: [id])
  mathSubField MathSubField @relation(fields: [mathSubFieldId], references: [id])

  mathBattleAnswers MathBattleAnswer[]

  @@index([generatedBatchName, difficulty])
  @@map("mathProblems")
}

model MathBattleAnswer {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  isCorrect         Boolean
  timeSpentInMillis Int     @default(0)

  userId        BigInt
  mathProblemId BigInt
  matchId       BigInt

  user        User        @relation(fields: [userId], references: [id])
  mathProblem MathProblem @relation(fields: [mathProblemId], references: [id])
  match       Match       @relation(fields: [matchId], references: [id])

  @@map("mathBattleAnswers")
}

model MathBattleResult {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  score    Int
  isWinner Boolean
  isDraw   Boolean

  matchId BigInt
  userId  BigInt

  match Match @relation(fields: [matchId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@map("mathBattleResults")
}

model AnswerFunction {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  func      String
  weight    Float   @db.Real
  condition String?

  mathSubFieldId BigInt

  mathSubField MathSubField @relation(fields: [mathSubFieldId], references: [id])

  @@map("answerFunctions")
}
