datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/entities"
  fileName     = "entityTypes.ts"
  enumFileName = "entityEnums.ts"
}

enum Gender {
  MALE
  FEMALE
  OTHER

  @@map("gender")
}

enum AuthProvider {
  EMAIL
  GOOGLE
  APPLE
  FACEBOOK

  @@map("authProvider")
}

enum TicketState {
  PROCESSING
  COMPLETED
  CANCELLED
  EXPIRED

  @@map("ticketState")
}

enum MatchState {
  PENDING
  IN_PROGRESS
  FINISHED

  @@map("matchState")
}

model User {
  id           BigInt       @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  email        String       @unique @db.VarChar(255)
  userName     String?      @db.VarChar(255)
  gender       Gender?
  passwordHash String       @db.VarChar(255)
  isCompleted  Boolean      @default(true)
  authProvider AuthProvider @default(EMAIL)

  refreshTokens       RefreshToken[]
  accountVerification AccountVerification?

  @@index([email])
  @@map("users")
}

model RefreshToken {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
  userId    BigInt
  value     String

  user User @relation(fields: [userId], references: [id])

  @@index([value], type: Hash)
  @@map("refreshTokens")
}

model AccountVerification {
  id          BigInt   @id @default(autoincrement())
  createdAt   DateTime @default(now())
  isVerified  Boolean  @default(false)
  oneTimeCode Int
  userId      BigInt   @unique

  user User @relation(fields: [userId], references: [id])

  @@map("accountVerification")
}

model MathConcept {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())
}

model Ticket {
  id            BigInt      @id @default(autoincrement())
  createdAt     DateTime    @default(now())
  mathConceptId BigInt
  userId        BigInt
  state         TicketState
  matchId       BigInt?
}

model Match {
  id        BigInt     @id @default(autoincrement())
  createdAt DateTime   @default(now())
  state     MatchState
}
