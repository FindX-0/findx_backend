datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/entities"
  fileName     = "entityTypes.ts"
  enumFileName = "entityEnums.ts"
}

enum AuthProvider {
  EMAIL
  GOOGLE
  APPLE
  FACEBOOK

  @@map("authProvider")
}

enum TicketState {
  PROCESSING
  COMPLETED
  CANCELLED
  EXPIRED

  @@map("ticketState")
}

enum MatchState {
  PENDING
  IN_PROGRESS
  FINISHED

  @@map("matchState")
}

enum Role {
  SUPER_ADMIN

  @@map("role")
}

model User {
  id           BigInt       @id @default(autoincrement())
  createdAt    DateTime     @default(now())
  email        String       @unique @db.VarChar(255)
  userName     String?      @db.VarChar(255)
  passwordHash String       @db.VarChar(255)
  isCompleted  Boolean      @default(true)
  authProvider AuthProvider @default(EMAIL)

  refreshTokens       RefreshToken[]
  accountVerification AccountVerification?

  @@index([email])
  @@map("users")
}

model AdminUser {
  id        BigInt   @id @default(autoincrement())
  createdAt DateTime @default(now())

  userName     String @db.VarChar(255)
  email        String @db.VarChar(255)
  passwordHash String @db.VarChar(255)
  roles        Role[]

  refreshTokens RefreshToken[]

  @@map("adminUsers")
}

model RefreshToken {
  id          BigInt   @id @default(autoincrement())
  createdAt   DateTime @default(now())
  userId      BigInt?
  adminUserId BigInt?
  value       String

  user      User?      @relation(fields: [userId], references: [id])
  adminUser AdminUser? @relation(fields: [adminUserId], references: [id])

  @@index([value], type: Hash)
  @@map("refreshTokens")
}

model AccountVerification {
  id          BigInt   @id @default(autoincrement())
  createdAt   DateTime @default(now())
  isVerified  Boolean  @default(false)
  oneTimeCode Int
  userId      BigInt   @unique

  user User @relation(fields: [userId], references: [id])

  @@map("accountVerification")
}

model MathField {
  id        BigInt   @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  mathProblems  MathProblem[]
  mathSubFields MathSubField[]
  Match         Match[]
  Ticket        Ticket[]

  @@map("mathFields")
}

model MathSubField {
  id        BigInt   @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())

  mathFieldId BigInt

  mathField    MathField     @relation(fields: [mathFieldId], references: [id])
  mathProblems MathProblem[]

  @@map("mathSubFields")
}

model Ticket {
  id          BigInt      @id @default(autoincrement())
  createdAt   DateTime    @default(now())
  mathFieldId BigInt
  userId      BigInt
  state       TicketState
  matchId     BigInt?

  mathField MathField @relation(fields: [mathFieldId], references: [id])

  @@map("tickets")
}

model Match {
  id          BigInt     @id @default(autoincrement())
  createdAt   DateTime   @default(now())
  startAt     DateTime
  endAt       DateTime
  state       MatchState
  mathFieldId BigInt

  mathField MathField @relation(fields: [mathFieldId], references: [id])

  @@map("matches")
}

model MathProblem {
  id         BigInt   @id @default(autoincrement())
  difficulty Int      @db.SmallInt
  imagePaths String[]
  text       String?
  tex        String?

  mathFieldId    BigInt
  mathSubFieldId BigInt
  mathField      MathField    @relation(fields: [mathFieldId], references: [id])
  mathSubField   MathSubField @relation(fields: [mathSubFieldId], references: [id])

  @@map("mathProblems")
}
