# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

input AcceptFriendRequestInput {
  userId: ID!
}

input AdminSignInInput {
  email: String!
  password: String!
}

input AdminSignUpInput {
  email: String!
  password: String!
  userName: String!
}

type AnswerFunctionObject {
  condition: String
  createdAt: DateTime!
  func: String!
  id: ID!
  mathSubFieldId: ID!
  weight: Float!
}

type AnswerFunctionPageObject {
  count: Int!
  data: [AnswerFunctionWithRelationsObject!]!
}

type AnswerFunctionWithRelationsObject {
  condition: String
  createdAt: DateTime!
  func: String!
  id: ID!
  mathSubField: MathSubFieldObject
  mathSubFieldId: ID!
  weight: Float!
}

type AuthPayloadObject {
  accessToken: String!
  hasEmailVerified: Boolean
  refreshToken: String!
}

enum AuthProvider {
  APPLE
  EMAIL
  FACEBOOK
  GOOGLE
  NONE
}

input BulkCreateMathProblemInput {
  generatedBatchName: String!
  values: [CreateMathProblemInput!]!
}

input CancelTicketInput {
  concurrencyTimestamp: String!
  ticketId: ID!
}

input CountGenerateMathProblemValuesInput {
  customStrParams: [GenerateMathProblemCustomStrParameterInput!]!
  numberParams: [GenerateMathProblemNumberParameterInput!]!
}

type CountObject {
  count: Int!
}

input CreateAnswerFunctionInput {
  condition: String
  func: String!
  mathSubFieldId: ID!
  weight: Float!
}

input CreateMathFieldInput {
  isPublic: Boolean!
  name: String!
  spamDelayMillis: Int!
}

input CreateMathProblemAnswerInput {
  isCorrect: Boolean!
  tex: String!
}

input CreateMathProblemInput {
  answers: [CreateMathProblemAnswerInput!]!
  difficulty: Float!
  imageMediaIds: [ID!]
  mathFieldId: ID!
  mathSubFieldId: ID!
  tex: String
  text: String
}

type CreateMathProblemResObject {
  createdAt: DateTime!
  difficulty: Float!
  generatedBatchName: String
  id: ID!
  mathFieldId: String!
  mathSubFieldId: String!
  tex: String
  text: String
}

input CreateMathSubFieldInput {
  mathFieldId: ID!
  name: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DeclineFriendRequestInput {
  userId: ID!
}

input DeviceSignInInput {
  deviceId: String!
}

input EmailSignInInput {
  email: String!
  password: String!
}

input EmailSignUpInput {
  email: String!
  password: String!
  userName: String!
}

input EnqueueTicketInput {
  mathFieldId: ID!
}

input FilterAnswerFunctionsInput {
  lastId: ID
  limit: Int!
  mathSubFieldId: ID
}

input FilterFriendsInput {
  searchQuery: String
}

input FilterMathSubFieldsInput {
  lastId: ID
  limit: Int!
  mathFieldId: ID
}

type FriendWithRelationsObject {
  createdAt: DateTime!
  friend: UserObject
  friendId: ID!
  status: FriendshipStatus!
  user: UserObject
  userId: ID!
}

enum FriendshipStatus {
  ACCEPTED
  REQUESTED
}

input GenerateMathProblemCustomStrParameterInput {
  index: Int!
  values: String!
}

input GenerateMathProblemNumberParameterInput {
  index: Int!
  max: Int!
  min: Int!
  step: Float!
}

input GenerateMathProblemValuesInput {
  answerConditionFunc: String
  correctAnswerConditionFunc: String
  customStrParams: [GenerateMathProblemCustomStrParameterInput!]!
  mathSubFieldId: ID!
  numberParams: [GenerateMathProblemNumberParameterInput!]!
  template: String!
}

type GenerateMathProblemValuesObject {
  answers: [MathProblemAnswerObject!]
  tex: String!
}

input GetAllAnswerFunctionsInput {
  mathSubFieldId: ID
}

input GetAllMathFieldsInput {
  onlyPublic: Boolean!
}

input GetMatchMathFieldInput {
  matchId: ID!
}

input GetMathBattleMathProblemsInput {
  matchId: ID!
}

input GetMathBattleResultsInput {
  matchId: ID!
}

input GoogleSignInInput {
  accessToken: String!
}

input IdentifierInput {
  id: ID!
}

type JwtTokenPayloadObject {
  accessToken: String!
  refreshToken: String!
}

input LastIdPageParamsObject {
  lastId: ID
  limit: Int!
}

type MatchObject {
  closeAt: DateTime!
  createdAt: DateTime!
  endAt: DateTime!
  id: ID!
  mathFieldId: String!
  mathProblemIds: [String!]!
  startAt: DateTime!
  state: MatchState!
  userIds: [String!]!
}

enum MatchState {
  FINISHED
  IN_PROGRESS
}

type MathBattleMathProblemObject {
  answers: [MathProblemAnswerWoutCorrectObject!]!
  createdAt: DateTime!
  difficulty: Float!
  generatedBatchName: String
  id: ID!
  images: [MediaFileObject!]
  mathFieldId: String!
  mathSubFieldId: String!
  tex: String
  text: String
}

type MathBattleResultObject {
  createdAt: DateTime!
  id: ID!
  isDraw: Boolean!
  isWinner: Boolean!
  matchId: ID!
  score: Int!
  trophyChange: Int!
  userId: ID!
}

type MathFieldObject {
  createdAt: DateTime!
  id: ID!
  isPublic: Boolean!
  name: String!
  spamDelayMillis: Int!
}

type MathFieldPageObject {
  count: Int!
  data: [MathFieldObject!]!
}

type MathProblemAnswerObject {
  isCorrect: Boolean!
  tex: String!
}

type MathProblemAnswerWoutCorrectObject {
  tex: String!
}

type MathProblemObject {
  answers: [MathProblemAnswerObject!]!
  createdAt: DateTime!
  difficulty: Float!
  generatedBatchName: String
  id: ID!
  images: [MediaFileObject!]
  mathField: MathFieldObject
  mathFieldId: String!
  mathSubField: MathSubFieldWithRelationsObject
  mathSubFieldId: String!
  tex: String
  text: String
}

type MathProblemPageObject {
  count: Int!
  data: [MathProblemObject!]!
}

type MathSubFieldObject {
  createdAt: DateTime!
  id: ID!
  mathFieldId: String!
  name: String!
}

type MathSubFieldPageObject {
  count: Int!
  data: [MathSubFieldWithRelationsObject!]!
}

type MathSubFieldWithRelationsObject {
  createdAt: DateTime!
  id: ID!
  mathField: MathFieldObject
  mathFieldId: String!
  name: String!
}

type MediaFileObject {
  createdAt: DateTime!
  fileName: String!
  id: ID!
  mimetype: String!
  path: String!
}

type Mutation {
  acceptFriendRequest(input: AcceptFriendRequestInput!): SuccessObject!
  adminRefreshToken(input: RefreshTokenInput!): JwtTokenPayloadObject!
  adminSignIn(input: AdminSignInInput!): JwtTokenPayloadObject!
  adminSignUp(input: AdminSignUpInput!): JwtTokenPayloadObject!
  bulkCreateMathProblem(input: BulkCreateMathProblemInput!): [CreateMathProblemResObject!]!
  cancelTicket(input: CancelTicketInput!): SuccessObject!
  createAnswerFunction(input: CreateAnswerFunctionInput!): AnswerFunctionObject!
  createMathField(input: CreateMathFieldInput!): MathFieldObject!
  createMathProblem(input: CreateMathProblemInput!): CreateMathProblemResObject!
  createMathSubField(input: CreateMathSubFieldInput!): MathSubFieldWithRelationsObject!
  declineFriendRequest(input: DeclineFriendRequestInput!): SuccessObject!
  deleteAnswerFunction(input: IdentifierInput!): SuccessObject!
  deleteMathField(input: IdentifierInput!): SuccessObject!
  deleteMathProblem(input: IdentifierInput!): SuccessObject!
  deleteMathSubField(input: IdentifierInput!): SuccessObject!
  deviceSignIn(input: DeviceSignInInput!): JwtTokenPayloadObject!
  emailSignIn(input: EmailSignInInput!): AuthPayloadObject!
  emailSignUp(input: EmailSignUpInput!): AuthPayloadObject!
  enqueueTicket(input: EnqueueTicketInput!): TicketObject!
  googleSignIn(input: GoogleSignInInput!): JwtTokenPayloadObject!
  refreshToken(input: RefreshTokenInput!): JwtTokenPayloadObject!
  sendFriendRequest(input: SendFriendRequestInput!): SuccessObject!
  submitMathProblemAnswer(input: SubmitMathProblemAnswerInput!): SuccessObject!
  updateAnswerFunction(input: UpdateAnswerFunctionInput!): AnswerFunctionObject!
  updateMathField(input: UpdateMathFieldInput!): MathFieldObject!
  updateMathProblem(input: UpdateMathProblemInput!): MathProblemObject!
  updateMathSubField(input: UpdateMathSubFieldInput!): MathSubFieldWithRelationsObject!
  withdrawFriendRequest(input: WithdrawFriendRequestInput!): SuccessObject!
}

type Query {
  authenticationStatus: SuccessObject!
  countGenerateMathProblemValues(input: CountGenerateMathProblemValuesInput!): CountObject!
  filterAnswerFunctions(input: FilterAnswerFunctionsInput!): AnswerFunctionPageObject!
  filterMathFields(input: LastIdPageParamsObject!): MathFieldPageObject!
  filterMathProblems(input: LastIdPageParamsObject!): MathProblemPageObject!
  filterMathSubFields(input: FilterMathSubFieldsInput!): MathSubFieldPageObject!
  generateMathProblemValues(input: GenerateMathProblemValuesInput!): [GenerateMathProblemValuesObject!]!
  getAllAnswerFunctions(input: GetAllAnswerFunctionsInput!): [AnswerFunctionObject!]!
  getAllMathFields(input: GetAllMathFieldsInput!): [MathFieldObject!]!
  getAnswerFunctionById(input: IdentifierInput!): AnswerFunctionObject!
  getAuthUser: UserWithRelationsObject!
  getAuthUserMeta: UserMetaObject!
  getFriendRequests(input: FilterFriendsInput!): [FriendWithRelationsObject!]!
  getFriends(input: FilterFriendsInput!): [FriendWithRelationsObject!]!
  getMatchById(input: IdentifierInput!): MatchObject!
  getMatchMathField(input: GetMatchMathFieldInput!): MathFieldObject!
  getMathBattleMathProblems(input: GetMathBattleMathProblemsInput!): [MathBattleMathProblemObject!]!
  getMathBattleResults(input: GetMathBattleResultsInput!): [MathBattleResultObject!]!
  getMathFieldById(input: IdentifierInput!): MathFieldObject!
  getMathProblemById(input: IdentifierInput!): MathProblemObject!
  getMathSubFieldById(input: IdentifierInput!): MathSubFieldWithRelationsObject!
  getServerTime: ServerTimeObject!
  getUserById(input: IdentifierInput!): UserWithRelationsObject!
}

input RefreshTokenInput {
  refreshToken: String!
}

input SendFriendRequestInput {
  userId: ID!
}

type ServerTimeObject {
  serverTime: DateTime!
}

input SubmitMathProblemAnswerInput {
  answer: String!
  matchId: ID!
  mathProblemId: ID!
}

type SuccessObject {
  success: Boolean!
}

type TicketObject {
  concurrencyTimestamp: String
  createdAt: DateTime!
  id: ID!
  matchId: ID
  mathFieldId: ID!
  state: TicketState!
  userId: ID!
}

enum TicketState {
  CANCELLED
  COMPLETED
  EXPIRED
  PROCESSING
}

input UpdateAnswerFunctionInput {
  condition: String
  func: String
  id: ID!
  mathSubFieldId: ID
  weight: Float
}

input UpdateMathFieldInput {
  id: ID!
  isPublic: Boolean
  name: String
  spamDelayMillis: Int
}

input UpdateMathProblemInput {
  answers: [CreateMathProblemAnswerInput!]
  difficulty: Float
  id: ID!
  imageMediaIds: [ID!]
  mathFieldId: ID
  mathSubFieldId: ID
  tex: String
  text: String
}

input UpdateMathSubFieldInput {
  id: ID!
  mathFieldId: ID
  name: String
}

type UserMetaObject {
  createdAt: DateTime!
  id: ID!
  trophies: Int!
  userId: ID!
}

type UserObject {
  authProvider: AuthProvider!
  createdAt: DateTime!
  email: String
  id: ID!
  isCompleted: Boolean!
  userName: String
}

type UserWithRelationsObject {
  authProvider: AuthProvider!
  createdAt: DateTime!
  email: String
  id: ID!
  isCompleted: Boolean!
  userMeta: UserMetaObject
  userName: String
}

input WithdrawFriendRequestInput {
  userId: ID!
}